{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-SCWTest-DF"
		},
		"SQLServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SQLServer'"
		},
		"RestAPIGetUsers_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"SQLServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adf-sql-server-testing.database.windows.net"
		},
		"SQLServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ADF-SQL"
		},
		"SQLServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "scw"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RestAPIGetUsers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"PageNo": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestAPIGetUsers_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('SQLServer_properties_typeProperties_server')]",
					"database": "[parameters('SQLServer_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SQLServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SQLServer_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestAPIGetUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestAPIGetUsers",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL\n",
							"type": "Expression"
						},
						"PageNo": {
							"value": "@dataset().PageNo",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"PageNo": {
						"type": "int"
					},
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@string(dataset().PageNo)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestAPIGetUsers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestAPIPOSTUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestAPIGetUsers",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"First_Name": {
						"type": "String"
					},
					"Last_Name": {
						"type": "String"
					},
					"Email": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "users",
					"requestMethod": "POST",
					"requestBody": {
						"value": "@json(concat('{\"name\":\"', dataset().First_Name, ' ', dataset().Last_Name, '\",\"job\":\"', dataset().Email, '\"}'))",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestAPIGetUsers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/APIGET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "APIGetUsers",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"x-api-key": "reqres-free-v1"
							},
							"url": {
								"value": "@pipeline().parameters.BaseURL",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "APIGetUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(\n    pipeline().parameters.StartPageNo,\n    add(\n        sub(activity('APIGetUsers').output.total_pages,\n            pipeline().parameters.StartPageNo),\n        1\n    )\n)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyAPIData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "ID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "[['email']"
													},
													"sink": {
														"name": "Email",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['first_name']"
													},
													"sink": {
														"name": "First_Name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['last_name']"
													},
													"sink": {
														"name": "Last_Name",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['data']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "RestAPIGetUsers",
											"type": "DatasetReference",
											"parameters": {
												"PageNo": {
													"value": "?page=@{item()}",
													"type": "Expression"
												},
												"BaseURL": "@pipeline().parameters.BaseURL"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQLDB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": {
													"value": "@pipeline().parameters.Schema",
													"type": "Expression"
												},
												"Table": {
													"value": "@pipeline().parameters.Table",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "If_CopyFailed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set_CopyStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('CopyAPIData').Status, 'Failed')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Append variable2",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "SuccessLog",
													"value": {
														"value": "@concat('Page ', string(item()), ' succeeded.')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Append_ErrorLog",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "Set_ErrorMessage",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "ErrorLog",
													"value": {
														"value": "@concat('Page ', string(item()), ' failed. Error: ', variables('ErrorMessage'))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "SP_LogError",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Append_ErrorLog",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[LogPipelineError]",
													"storedProcedureParameters": {
														"RunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"PageNumber": {
															"value": {
																"value": "@item()",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"ErrorMessage": {
															"value": {
																"value": "@if(equals(activity('CopyAPIData').Status, 'Failed'), activity('CopyAPIData').error.message, 'No error message')",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLServer",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set_ErrorMessage",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "ErrorMessage",
													"value": {
														"value": "@if(equals(activity('CopyAPIData').Status, 'Failed'), activity('CopyAPIData').error.message, 'No error message')",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set_CopyStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CopyAPIData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CopyStatus",
										"value": {
											"value": "@if(equals(activity('CopyAPIData').Status, 'Failed'), 'Failed', 'Success')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If_NoDataReturned",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set_CopyStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('CopyAPIData').output.rowsCopied, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Append variable3",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "SuccessLog",
													"value": {
														"value": "@concat('Page ', string(item()), ' succeeded.')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set_InfoMessage",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "InfoMessage",
													"value": {
														"value": "@concat('Page ', string(item()), ' returned no data.')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Append_InfoLog",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "Set_InfoMessage",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "InfoLog",
													"value": {
														"value": "@variables('InfoMessage')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Table": {
						"type": "string",
						"defaultValue": "Users"
					},
					"StartPageNo": {
						"type": "int",
						"defaultValue": 1
					},
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://reqres.in/api/users"
					}
				},
				"variables": {
					"ErrorLog": {
						"type": "Array"
					},
					"CopyStatus": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					},
					"InfoMessage": {
						"type": "String"
					},
					"InfoLog": {
						"type": "Array"
					},
					"SuccessLog": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestAPIGetUsers')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB')]",
				"[concat(variables('factoryId'), '/linkedServices/SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/APIPOST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_Users",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetUsersFromSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetUsersFromSQL').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyUserToReqRes",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "TabularSource"
										},
										"sink": {
											"type": "RestSink",
											"httpRequestTimeout": "00:05:00",
											"requestInterval": 10,
											"requestMethod": "POST",
											"writeBatchSize": 10000,
											"httpCompressionType": "none"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID",
														"type": "Int32"
													},
													"sink": {
														"path": "$['ID']"
													}
												},
												{
													"source": {
														"name": "Email",
														"type": "String"
													},
													"sink": {
														"path": "$['Email']"
													}
												},
												{
													"source": {
														"name": "First_Name",
														"type": "String"
													},
													"sink": {
														"path": "$['First_Name']"
													}
												},
												{
													"source": {
														"name": "Last_Name",
														"type": "String"
													},
													"sink": {
														"path": "$['Last_Name']"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SQLDB",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "dbo",
												"Table": "Users"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RestAPIPOSTUsers",
											"type": "DatasetReference",
											"parameters": {
												"First_Name": "@item().First_Name",
												"Last_Name": "@item().Last_Name",
												"Email": "@item().Email"
											}
										}
									]
								},
								{
									"name": "Set_CopyStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CopyUserToReqRes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CopyStatus",
										"value": {
											"value": "@if(greater(length(coalesce(activity('CopyUserToReqRes').output.errors, [])),0),'Failed','Success')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If_CopyFailed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set_CopyStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(coalesce(activity('CopyUserToReqRes').output.errors, [])), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LogError_SP",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[LogPipelineError]",
													"storedProcedureParameters": {
														"RunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"PageNumber": {
															"value": {
																"value": "@item().ID",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"ErrorMessage": {
															"value": {
																"value": "@string(activity('CopyUserToReqRes').output.errors[0]['message'])",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SQLServer",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "GetUsersFromSQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "dbo",
									"Table": "users"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://reqres.in/api/users"
					}
				},
				"variables": {
					"CopyStatus": {
						"type": "String"
					},
					"ErrorLog": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDB')]",
				"[concat(variables('factoryId'), '/datasets/RestAPIPOSTUsers')]",
				"[concat(variables('factoryId'), '/linkedServices/SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostUserDataToReqres')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetUsersFromSQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLDB",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									},
									"Table": {
										"value": "@pipeline().parameters.Table",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachUser",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetUsersFromSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetUsersFromSQL').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "PostToReqres",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 2,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"x-api-key": "reqres-free-v1"
										},
										"url": "https://reqres.in/api/users",
										"body": {
											"name": "@concat(item().First_Name, ' ', item().Last_Name)",
											"email": "@item().Email",
											"job": "Data Migration Specialist"
										}
									}
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "PostToReqres",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LogAPIResponse_SP]",
										"storedProcedureParameters": {
											"ADFHttpStatusCodeInResponse": {
												"value": {
													"value": "@activity('PostToReqres').output.ADFHttpStatusCodeInResponse",
													"type": "Expression"
												},
												"type": "String"
											},
											"ADFWebActivityResponseHeaders": {
												"value": {
													"value": "@activity('PostToReqres').output.ADFWebActivityResponseHeaders",
													"type": "Expression"
												},
												"type": "String"
											},
											"BillingDuration": {
												"value": {
													"value": "@activity('PostToReqres').output.BillingDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"BillingMeterType": {
												"value": {
													"value": "@activity('PostToReqres').output.BillingMeterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"BillingUnit": {
												"value": {
													"value": "@activity('PostToReqres').output.BillingUnit",
													"type": "Expression"
												},
												"type": "String"
											},
											"CreatedAt": {
												"value": {
													"value": "@activity('PostToReqres').output.CreatedAt",
													"type": "Expression"
												},
												"type": "String"
											},
											"EffectiveIntegrationRuntime": {
												"value": {
													"value": "@activity('PostToReqres').output.EffectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											},
											"Email": {
												"value": {
													"value": "@activity('PostToReqres').output.Email",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('PostToReqres').output.ErrorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('PostToReqres').output.ErrorMessage",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDuration": {
												"value": {
													"value": "@activity('PostToReqres').output.ExecutionDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationRuntimeQueueDuration": {
												"value": {
													"value": "@activity('PostToReqres').output.IntegrationRuntimeQueueDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"IsSuccess": {
												"value": {
													"value": "@activity('PostToReqres').output.IsSuccess",
													"type": "Expression"
												},
												"type": "String"
											},
											"Job": {
												"value": {
													"value": "@activity('PostToReqres').output.Job",
													"type": "Expression"
												},
												"type": "String"
											},
											"Name": {
												"value": {
													"value": "@activity('PostToReqres').output.Name",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawResponse": {
												"value": {
													"value": "@activity('PostToReqres').output.RawResponse",
													"type": "Expression"
												},
												"type": "String"
											},
											"UserID": {
												"value": {
													"value": "@activity('PostToReqres').output.UserID",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLServer",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Table": {
						"type": "string",
						"defaultValue": "users"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDB')]",
				"[concat(variables('factoryId'), '/linkedServices/SQLServer')]"
			]
		}
	]
}